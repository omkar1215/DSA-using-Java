//StackDemo.java

package stack;

public class StackDemo {
	private int size;
	private int arr[];
	private int top;
	public void initStack(int s) {
		size=s;
		arr=new int[s];
		top=-1;
	}
	public boolean isFull() {
		return top==size-1;
	}
	public boolean isEmpty() {
		return top==-1;
	}
	public void push(int n) {
		if(!isFull()) {
			arr[++top]=n;
		}else {
			System.out.println("Stack OverFlow!!");
		}
	}
	public int pop() {
		int val=-1;
		if(!isEmpty()) {
			val=arr[top--];
		}else {
			System.out.println("Stack UnderFlow");
		}
		return val;
	}
	public int peek() {
		return arr[top];
	}
	public void display() {
		for(int i=top;i>-1;i--){
			System.out.println(arr[i]);
		}
	}
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//StackDemoClient.java

package stack;

import java.util.Scanner;

public class StackDemoClient {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		StackDemo stack=new StackDemo();
		
		int option;
		do {
			System.out.println("Enter option:\n1: Init\n2: Push\n3: Pop\n4: Display");
			option=sc.nextInt();
			switch(option) {
			case 1:
				System.out.println("Enter Size of Array: ");
				int n=sc.nextInt();
				stack.initStack(n);
				break;
			case 2:
				System.out.println("Enter Element: ");
				int el=sc.nextInt();
				stack.push(el);
				break;
			case 3:
				System.out.println ("Popped element: "+stack.pop());
				break;
			case 4:
				stack.display();
				break;
			case 0:
					System.exit(0);
			}
		}while(option!=0);
	}
}

