//Node.java
package stack;

public class Node {
	private int data;
	private Node next;
	public Node() {
		data=0;
		next=null;
	}
	public int getData() {
		return data;
	}
	public void setData(int data) {
		this.data = data;
	}
	public Node getNext() {
		return next;
	}
	public void setNext(Node next) {
		this.next = next;
	}
	
}

//Stack.java
package stack;

public class Stack {
	private Node top;
	public Stack() {
		top=null;
	}
	public boolean isEmpty() {
		return top==null;
	}
	public void Push(int val) {
		Node newnode=new Node();
		newnode.setData(val);
		newnode.setNext(null);
		if(top==null) {
			top=newnode;
		}else {
			newnode.setNext(top);
			top=newnode;
		}
	}
	public void Display() {
		if(top==null) {
			System.out.println("Stack is Empty");
		}else {
			Node temp=top;
			while(temp!=null) {
				System.out.println(temp.getData());
				temp=temp.getNext();
			}
		}
	}
	public int Pop() {
		int val=-99;
		if(isEmpty()) {
			System.out.println("Stack is Empty");
		}else {
			val=top.getData();
			Node temp=top;
			top=top.getNext();
			temp.setNext(null);
		}
		return val;
	}
	
}

//StackLLClient.java
package stack;

import java.util.Scanner;

public class StackLLClient {
	public static void main(String[] agrs) {
		Stack stack=new Stack();
		Scanner sc=new Scanner(System.in);
		int choice=-1;
		while(choice!=0) {
			System.out.println("Enter choice: \n1:Add \n2: Pop\n3: Display \n0: Exit.");
			choice=sc.nextInt();
			switch(choice) {
			case 1:
				System.out.println("Enter Number: ");
				int val=sc.nextInt();
				stack.Push(val);
				break;
			case 2:
				System.out.println("Pop: "+stack.Pop());
				break;
			case 3:
				stack.Display();
				break;
			case 0:
				System.exit(0);
				break;
			}
		}
		
	}
}
