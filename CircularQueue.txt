//CircularQueue.java
package CircularQueue;

public class CircularQueue {
	private int size;
	private int arr[];
	private int front;
	private int rear;
	public CircularQueue(int s) {
		size=s;
		arr=new int[s];
		front=-1;
		rear=-1;
	}
	public boolean isEmpty() {
		return rear==front;
	}
	public boolean isFull() {
		return front==-1 && rear==(size-1);
	}
	public void enQueue(int n) {
		if(!isFull()){
			rear=(rear+1)%size; //shift rear
			arr[rear]=n;
		}else {
			System.out.println("Oueue is Full!");
		}
	} 
	public int deQueue() {
		int value=-1;
		if(!isEmpty()) {
			front=(front+1)%size; //shift rear
			value=arr[front];
		}else {
			System.out.println("Qeueu is Empty");
		}
		return value;
	}
	public void Display() {
		int i;
		if(!isEmpty()) {
			for(i=front +1;i!=rear;i=(i+1)%size) {
				System.out.println(arr[i]);
			}
			System.out.println(arr[i]);
		}else {
			System.out.println("Queue is Empty");
		}
	}
}


//CircularQeueClient.java
package CircularQueue;

import java.util.Scanner;

public class CircularQueueClient {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter Size of the Queue");
		CircularQueue cQ=new CircularQueue(sc.nextInt());
		int choice=-99;
		while(choice!=0) {
			System.out.println("Enter your choice: \n1: Enqeue \n2: Dequeue \n3: Display \n4: Exit");
			choice=sc.nextInt();
			switch(choice) {
			case 1:
				System.out.println("Enter value you want to enter: ");
				cQ.enQueue(sc.nextInt());
				break;
			case 2:
				cQ.deQueue();
				break;
			case 3:
				cQ.Display();
				break;
			case 0:
				System.exit(0);
			}
		}
	}
}
